{"version":3,"file":"getting-started.spec.js","sourceRoot":"","sources":["../src/getting-started.spec.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;AAE3B,QAAQ,CAAC,OAAO,EAAE;IACd,QAAQ,CAAC,YAAY,EAAE;QACnB,EAAE,CAAC,gDAAgD,EAAE;YACjD,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH;;;;GAIG;AACH,SAAS,KAAK,CAAC,EAAU;IACrB,OAAO,IAAI,OAAO,CAAC,CAAC,QAAkB,EAAE,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,EAAE,CAAC,CAAC,CAAC;AACzE,CAAC;AAED,QAAQ,CAAC,sBAAsB,EAAE;IAE7B,MAAM,SAAS,GAAG,IAAI,CAAC;IAEvB,EAAE,CAAC,oDAAoD,EACnD,UAAU,IAAI;QACV,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YACvB,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;YAChB,IAAI,EAAE,CAAC;QACX,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;IAEP,EAAE,CAAC,IAAI,CAAC,kCAAkC,EACtC,UAAU,IAAI;QACV,OAAO,KAAK,CAAC,SAAS,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE;YAC9B,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC,CAAC;aACG,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC;IAC5B,CAAC,CAAC,CAAC;IAEP,EAAE,CAAC,qCAAqC,EACpC;;YACI,MAAM,KAAK,CAAC,SAAS,CAAC,CAAC;YACvB,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;QACpB,CAAC;KAAA,CAAC,CAAC;AACX,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,IAAI,CAAC,sCAAsC,EAAE,GAAG,EAAE;IACvD,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE;QACf,oEAAoE;QACpE,sBAAsB;QACtB,mDAAmD;QACnD,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;IACpB,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,OAAO,EAAE;IACd,MAAM,CAAC;QACH,OAAO,CAAC,GAAG,CAAC,0DAA0D,CAAC,CAAC;IAC5E,CAAC,CAAC,CAAC;IAEH,KAAK,CAAC;QACF,OAAO,CAAC,GAAG,CAAC,uDAAuD,CAAC,CAAC;IACzE,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC;QACP,OAAO,CAAC,GAAG,CAAC,oDAAoD,CAAC,CAAC;IACtE,CAAC,CAAC,CAAC;IAEH,SAAS,CAAC;QACN,OAAO,CAAC,GAAG,CAAC,kDAAkD,CAAC,CAAC;IACpE,CAAC,CAAC,CAAC;IAEH,aAAa;IACb,EAAE,CAAC,aAAa,EAAE,cAAc,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,EAAE,CAAC,aAAa,EAAE,cAAc,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACpD,EAAE,CAAC,eAAe,EAAE,cAAc,MAAM,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC,CAAC","sourcesContent":["const assert = chai.assert;\n\ndescribe('Array', function () {\n    describe('#indexOf()', function () {\n        it('should return -1 when the value is not present', function () {\n            assert.strictEqual([1, 2, 3].indexOf(4), -1);\n        });\n    });\n});\n\n/**\n * wraps `setTimeout` in a `Promise`\n *\n * @tutorial https://javascript.info/task/delay-promise\n */\nfunction delay(ms: number): Promise<void> {\n    return new Promise((executor: Function) => setTimeout(executor, ms));\n}\n\ndescribe('asynchronous testing', function () {\n\n    const oneSecond = 1000;\n\n    it('can happen with the `then()` callback and `done()`',\n        function (done) {\n            delay(oneSecond).then(() => {\n                assert.ok(true);\n                done();\n            });\n        });\n\n    it.skip('can be an erroneous anti-pattern',\n        function (done) {\n            return delay(oneSecond).then(() => {\n                assert.ok(true);\n            })\n                .then(() => done());\n        });\n\n    it('can happen with `async` and `await`',\n        async function () {\n            await delay(oneSecond);\n            assert.ok(true);\n        });\n});\n\ndescribe.skip('Mocha and the use of arrow functions', () => {\n    it('my test', () => {\n        // should set the timeout of this test to 1000 ms; instead will fail\n        // this.timeout(1000);\n        // in Typescript, the line above should not compile\n        assert.ok(true);\n    });\n});\n\ndescribe('hooks', function () {\n    before(function () {\n        console.log('`before()` runs once before the first test in this block');\n    });\n\n    after(function () {\n        console.log('`after()` runs once after the last test in this block');\n    });\n\n    beforeEach(function () {\n        console.log('`beforeEach()` runs before each test in this block');\n    });\n\n    afterEach(function () {\n        console.log('`afterEach()` runs after each test in this block');\n    });\n\n    // test cases\n    it('is test one', function () { assert.ok(true); });\n    it('is test two', function () { assert.ok(true); });\n    it('is test three', function () { assert.ok(true); });\n});\n"]}